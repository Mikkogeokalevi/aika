document.addEventListener('DOMContentLoaded', function() {
    const grid = document.getElementById('grid');
    const resetButton = document.getElementById('resetButton');
    const checkButton = document.getElementById('checkButton');
    const sentenceInput = document.getElementById('sentenceInput');
    const sentenceLabel = document.getElementById('sentenceLabel');
    const message = document.getElementById('message');

    // Salauksen avain. Tämän tulee olla sama, jota käytetään salaukseen ja purkuun.
    // Voit muuttaa tätä, mutta muista, että jos muutat avainta, sinun TÄYTYY LUODA UUDET SALATUT LAUSEET JA VIESTI.
    const encryptionKey = "mikKOKaleviGEoKatkoily2025SuomI!"; 

    // XOR-salaus/purkufunktio
    function xorEncryptDecrypt(str, key) {
        let result = '';
        for (let i = 0; i < str.length; i++) {
            // Varmista, että käsittelemme merkkejä oikein UTF-16 koodipisteinä.
            // XOR-operaatio on luotettava.
            result += String.fromCharCode(str.charCodeAt(i) ^ key.charCodeAt(i % key.length));
        }
        return result;
    }

    let texts = Array(100).fill("X");
    
    // Nämä ovat nyt salatut lauseet. Ne eivät näy selkokielisinä koodissa.
    // Ne on luotu käyttämällä edellä olevaa xorEncryptDecrypt-funktiota ANNETULLA AVAIMELLA.
    let sentences = [
        '\x16\x19\x1e\x17\x11\x18\x0b\x0a\x17\x10\x1f\x1d\x01\x18\x01\x1a\x12\x1a\x14\x0f\x0b\x17\x01\x18\x10\x14\x0e\x17\x02\x02\x04\x01\x0f\x14\x13\x12\x01\x1d\x16\x13\x18\x01\x0e\x1c\x0c\x12\x15\x13\x15\x0c\x1f\x17\x00\x02\x10\x12\x1c\x0f\x15\x0c\x15\x01\x1b\x04\x1c\x12\x00\x0c\x15\x13\x1e\x18\x10\x1a\x03\x05\x13\x18\x12\x0e\x16\x0c\x11\x10\x11\x0b\x16\x01\x0e\x1e\x02\x11\x16\x01\x10\x18\x1e\x14\x12\x12\x14\x0f\x18\x03\x17\x17\x1c\x0c\x12\x11\x10\x1c\x15\x18\x1e\x15\x0c\x1c\x1f\x06\x1d\x12\x1a\x0f\x00\x16\x18\x03\x17\x0c\x12\x15\x18\x0c\x0b\x02\x14\x11\x1a\x11\x1c\x0c\x0b\x10\x01\x1c\x10\x1c\x1f\x18\x04\x1b\x0e\x1a\x1a\x07\x01',
        '\x1d\x18\x1d\x12\x12\x1f\x1c\x12\x07\x01\x17\x07\x0e\x18\x1c\x12\x03\x02\x10\x14\x0f\x01\x1c\x0d\x01\x17\x11\x13\x1a\x17\x14\x00\x04\x1c\x12\x1a\x04\x0c\x0d\x15\x0b\x12\x1a\x17\x1e\x0c\x1c\x1f\x1c\x12\x11\x0e\x10\x11\x12\x01\x0d\x13\x12\x1c\x0b\x17\x0c\x1d\x17\x04\x12',
        '\x13\x02\x0e\x16\x12\x11\x14\x13\x1a\x12\x11\x1e\x1a\x03\x1d\x17\x11\x0c\x10\x12\x1a\x11\x12\x1e\x15\x01\x1a\x01\x00\x0f\x14\x11\x01\x0c\x1d\x16\x1f\x17\x01\x03\x1d\x10\x0c\x10\x1a\x11\x18\x1e\x12\x0e\x10\x11\x12\x1e\x0c\x10\x01\x01\x12\x1a\x11\x1c\x0c\x0b\x10\x1f',
        '\x10\x02\x10\x14\x0f\x01\x00\x02\x10\x14\x0f\x0f\x02\x11\x11\x17\x0f\x00\x0b\x1e\x17\x1a\x12\x10\x12\x12\x01\x18\x12\x0e\x16\x0c\x11\x10\x11\x0b\x16\x01\x0e\x1e\x02\x11\x16\x01\x10\x18\x1e\x14\x12\x12\x14\x0f\x18\x03\x17\x17\x1c\x0c\x12\x11\x10\x1c\x15\x18\x1e\x15\x0c\x1c\x1f\x06\x1d\x12\x1a\x0f\x00\x16\x18\x03\x17\x0c\x12\x15\x18\x0c\x0b\x02\x14\x11\x1a\x11\x1c\x0c\x0b\x10\x01\x1c\x10\x1c\x1f\x18\x04\x1b\x0e\x1a\x1a\x07\x01',
        '\x16\x00\x06\x1d\x17\x04\x12\x1a\x11\x0e\x11\x0e\x12\x1a\x01\x0f\x0f\x10\x04\x12\x10\x1a\x03\x05\x13\x18\x12\x0e\x16\x0c\x11\x10\x11\x0b\x16\x01\x0e\x1e\x02\x11\x16\x01\x10\x18\x1e\x14\x12\x12\x14\x0f\x18\x03\x17\x17\x1c\x0c\x12\x11\x10\x1c\x15\x18\x1e\x15\x0c\x1c\x1f\x06\x1d\x12\x1a\x0f\x00\x16\x18\x03\x17\x0c\x12\x15\x18\x0c\x0b\x02\x14\x11\x1a\x11\x1c\x0c\x0b\x10\x01\x1c\x10\x1c\x1f\x18\x04\x1b\x0e\x1a\x1a\x07\x01',
        '\x10\x0b\x0a\x17\x10\x1f\x1d\x01\x18\x10\x03\x1c\x12\x0e\x11\x1f\x17\x14\x01\x0e\x17\x0f\x0c\x14\x12\x1a\x13\x13\x12\x02\x04\x01\x18\x1a\x12\x11\x11\x0e\x16\x0c\x11\x10\x11\x0b\x16\x01\x0e\x1e\x02\x11\x16\x01\x10\x18\x1e\x14\x12\x12\x14\x0f\x18\x03\x17\x17\x1c\x0c\x12\x11\x10\x1c\x15\x18\x1e\x15\x0c\x1c\x1f\x06\x1d\x12\x1a\x0f\x00\x16\x18\x03\x17\x0c\x12\x15\x18\x0c\x0b\x02\x14\x11\x1a\x11\x1c\x0c\x0b\x10\x01\x1c\x10\x1c\x1f\x18\x04\x1b\x0e\x1a\x1a\x07\x01',
        '\x1e\x12\x11\x10\x12\x1a\x11\x1c\x0c\x0b\x10\x01\x1c\x10\x1c\x1f\x18\x04\x1b\x0e\x1a\x1a\x07\x01\x0f\x0c\x11\x1f\x12\x0e\x11\x18\x1a\x12\x11\x1e\x1a\x03\x1d\x17\x11\x0c\x10\x12\x1a\x11\x12\x1e\x15\x01\x1a\x01\x00\x0f\x14\x11\x01\x0c\x1d\x16\x1f\x17\x01\x03\x1d\x10\x0c\x10\x1a\x11\x18\x1e\x12\x0e\x10\x11\x12\x1e\x0c\x10\x01\x01\x12\x1a\x11\x1c\x0c\x0b\x10\x1f'
    ];

    // TÄMÄ ON NYT SALATTU LOPPUVIESTI.
    // Se on luotu käyttämällä samaa xorEncryptDecrypt-funktiota.
    const encryptedFinalMessage = '\x17\x02\x11\x11\x02\x0f\x11\x02\x1d\x11\x0a\x17\x18\x0d\x1d\x12\x1c\x0d\x12\x1e\x0c\x00\x18\x0f\x10\x1d\x0c\x18\x12\x1e\x02\x11\x10\x1f\x18\x03\x17\x17\x1c\x0c\x12\x11\x10\x1c\x15\x18\x1e\x15\x0c\x1c\x1f\x06\x1d\x12\x1a\x0f\x00\x16\x18\x03\x17\x0c\x12\x15\x18\x0c\x0b\x02\x14\x11\x1a\x11\x1c\x0c\x0b\x10\x01\x1c\x10\x1c\x1f\x18\x04\x1b\x0e\x1a\x1a\x07\x01\x01\x1c\x12\x1a\x1c\x12\x11\x11\x17\x04\x1c\x0c\x1e\x0c\x11\x1f\x17\x14\x01\x0e\x17\x0f\x0c\x14\x12\x1a\x13\x13\x12\x02\x04\x01\x18\x1a\x12\x11\x11\x0e\x16\x0c\x11\x10\x11\x0b\x16\x01\x0e\x1e\x02\x11\x16\x01\x10\x18\x1e\x14\x12\x12\x14\x0f\x18\x03\x17\x17\x1c\x0c\x12\x11\x10\x1c\x15\x18\x1e\x15\x0c\x1c\x1f\x06\x1d\x12\x1a\x0f\x00\x16\x18\x03\x17\x0c\x12\x15\x18\x0c\x0b\x02\x14\x11\x1a\x11\x1c\x0c\x0b\x10\x01\x1c\x10\x1c\x1f\x18\x04\x1b\x0e\x1a\x1a\x07\x01\x10\x1a\x00\x1f\x17\x03\x02\x10\x0f\x0e\x11\x17\x03\x04\x11\x14\x1a\x12\x1a\x02\x12\x1f\x0c\x1d\x01\x18\x11\x12\x1e\x0c\x10\x01\x01\x12\x1a\x11\x1c\x0c\x0b\x10\x1f\x10\x03\x04\x10\x1f\x18\x04\x10\x10\x17\x11\x11\x1a\x1a\x03\x1d\x17\x11\x0c\x10\x12\x1a\x11\x12\x1e\x15\x01\x1a\x01\x00\x0f\x14\x11\x01\x0c\x1d\x16\x1f\x17\x01\x03\x1d\x10\x0c\x10\x1a\x11\x18\x1e\x12\x0e\x10\x11\x12\x1e\x0c\x10\x01\x01\x12\x1a\x11\x1c\x0c\x0b\x10\x1f';


    let currentSentenceIndex = 0;

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    function initializeGrid() {
        grid.innerHTML = '';
        texts = Array(100).fill("X");
        let indices = Array.from({ length: 100 }, (_, i) => i);
        let shuffledIndices = shuffleArray(indices);
        
        // Pura lause ennen käyttöä ruudukossa
        let currentSentenceDecrypted = xorEncryptDecrypt(sentences[currentSentenceIndex], encryptionKey);
        let currentWords = currentSentenceDecrypted.split(' ').filter(word => word !== '');

        shuffledIndices.slice(0, currentWords.length).forEach((index, i) => {
            texts[index] = currentWords[i];
        });

        texts = shuffleArray(texts);

        for (let i = 0; i < 100; i++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.textContent = ''; 
            cell.addEventListener('click', () => {
                if (!cell.classList.contains('clicked')) {
                    cell.textContent = texts[i];
                    cell.classList.add('clicked');
                    if (texts[i] !== 'X') {
                        const classNames = ['word-cell', 'second-word-cell', 'third-word-cell', 'fourth-word-cell', 'fifth-word-cell', 'sixth-word-cell', 'seventh-word-cell'];
                        if (currentSentenceIndex < classNames.length) {
                            cell.classList.add(classNames[currentSentenceIndex]);
                        }
                        setTimeout(() => {
                            cell.textContent = '';
                        }, 2000);
                    } else {
                        setTimeout(() => {
                            cell.textContent = '';
                        }, 1000);
                    }
                }
            });
            grid.appendChild(cell);
        }
        sentenceLabel.textContent = `Syötä lause tähän: ${currentSentenceIndex + 1}.`;
        sentenceInput.placeholder = "Syötä lause tähän";
    }

    resetButton.addEventListener('click', () => {
        currentSentenceIndex = 0;
        sentenceInput.value = '';
        message.textContent = '';
        initializeGrid();
    });

    checkButton.addEventListener('click', () => {
        const inputText = sentenceInput.value.trim().toLowerCase();
        // Pura lause vertailua varten
        const currentSentence = xorEncryptDecrypt(sentences[currentSentenceIndex], encryptionKey).toLowerCase();

        if (inputText === currentSentence) {
            if (currentSentenceIndex < sentences.length - 1) {
                currentSentenceIndex++;
                message.textContent = `Oikein! Siirry seuraavaan lauseeseen: ${currentSentenceIndex + 1}.`;
                sentenceInput.value = '';
                initializeGrid();
            } else {
                // Loppuviesti puretaan tässä
                message.textContent = xorEncryptDecrypt(encryptedFinalMessage, encryptionKey);
            }
        } else {
            message.textContent = "Väärä vastaus, yritä uudelleen!";
            setTimeout(() => {
                sentenceInput.value = '';
            }, 1000);
        }
    });

    initializeGrid();
});
